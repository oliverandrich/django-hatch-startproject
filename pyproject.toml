[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{project_name}}"
dynamic = ["version"]
description = ""
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [{ name = "Oliver Andrich", email = "oliver@andrich.me" }]
dependencies = [
  "django[argon2]>=4.2.0,<5.0",
  "django-browser-reload>=1.9.0",
  "django-environ>=0.10.0",
  "django-htmx>=1.15.0",
  "django-rich>=1.6.0",
  "django-tailwind-cli>=2.2.3",
  "pytz",
  "whitenoise[brotli]>=6.5.0"
]

[project.optional-dependencies]
mysql = [
  "mysqlclient>=2.2.0",
  "django-mysql>=4.10.0",
]
postgres = [
  "psycopg[binary]>=3.1.10",
]

[tool.hatch.version]
path = "config/__version__.py"

# Default environment
[tool.hatch.envs.default]
dependencies = ["django-types", "ipdb", "model-bakery"]
features = [
  # Uncomment the next line to add the MySQL dependencies
  # "mysql",
  # Uncomment the next line to add the Postgres dependencies
  # "postgres",
]

[tool.hatch.envs.default.scripts]
runserver = "manage.py tailwind runserver {args}"
migrate = "manage.py migrate {args}"
makemigrations = "manage.py makemigrations {args}"

# Test environment
[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.test]
dependencies = ["django-rich", "coverage[toml]"]

[tool.hatch.envs.test.scripts]
test = "manage.py test {args}"
test-cov = "coverage run manage.py test {args}"
cov-report = ["coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

# Lint environment
[tool.hatch.envs.lint]
dependencies = ["pyright", "django-types", "curlylint", "black", "ruff", "pyupgrade", "django-upgrade"]

[tool.hatch.envs.lint.scripts]
run-pyright = "pyright {args:.}"
run-black = "black --quiet {args:.}"
run-ruff = "ruff check --quiet --fix --exit-non-zero-on-fix {args:.}"
run-curlylint = "curlylint {args:.}"
run-pyupgrade = "pyupgrade --py311-plus {args}"
run-all-pyupgrade = "git ls-files -- '*.py' | xargs pyupgrade --py311-plus"
run-django-upgrade = "django-upgrade --target-version 4.2 {args}"
run-all-django-upgrade = "git ls-files -- '*.py' | xargs django-upgrade --target-version 4.2"
python = ["run-pyright", "run-black", "run-ruff", "run-all-pyupgrade", "run-all-django-upgrade"]
templates = ["run-curlylint"]
all = ["python", "templates"]

# Black
[tool.black]
target-version = ["py311"]
line-length = 120
skip-string-normalization = true

# Pyright
[tool.pyright]
typeCheckingMode = "basic"

# Ruff
[tool.ruff]
target-version = "py311"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["django_tailwind_cli"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

# Coverage
[tool.coverage.run]
source=["."]
branch = true
parallel = true
omit = ["config/__version__.py"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

# Curlylint
[tool.curlylint]
include = '\.(html|jinja)$'
exclude = '''
(
  /(
      \.eggs           # exclude a few common directories in the root of the project
    | \.git
    | \.venv
    | \.ruff_cache
  )/
  | webpack-stats.html # also separately exclude a file named webpack-stats.html in the root of the project
)
'''

[tool.curlylint.rules]
indent = 4
aria_role = true
django_forms_rendering = true
image_alt = true
meta_viewport = true
no_autofocus = true
tabindex_no_positive = true
